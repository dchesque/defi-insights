#!/usr/bin/env python
"""
Script de configura√ß√£o inicial para DeFi Insight.
"""
import os
import sys
import subprocess
import platform

def check_python_version():
    """Verifica a vers√£o do Python."""
    print("üîç Verificando vers√£o do Python...")
    required_version = (3, 7)
    current_version = sys.version_info
    
    if current_version < required_version:
        print(f"‚ùå Python {required_version[0]}.{required_version[1]} ou superior √© necess√°rio")
        print(f"   Vers√£o atual: {current_version[0]}.{current_version[1]}")
        sys.exit(1)
    
    print(f"‚úÖ Usando Python {current_version[0]}.{current_version[1]}.{current_version[2]}")

def install_dependencies():
    """Instala as depend√™ncias do projeto."""
    print("\nüîß Instalando depend√™ncias...")
    
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar depend√™ncias")
        sys.exit(1)

def setup_env_file():
    """Configura o arquivo .env se ele n√£o existir."""
    print("\nüîß Configurando vari√°veis de ambiente...")
    
    if not os.path.exists(".env"):
        if os.path.exists(".env.example"):
            print("üìù Criando arquivo .env a partir do exemplo...")
            
            # Em Windows, precisamos usar 'copy' em vez de 'cp'
            if platform.system() == "Windows":
                os.system("copy .env.example .env")
            else:
                os.system("cp .env.example .env")
                
            print("‚úÖ Arquivo .env criado! Por favor, edite-o com suas credenciais.")
        else:
            print("üìù Criando arquivo .env b√°sico...")
            
            with open(".env", "w") as f:
                f.write("""# DeFi Insight - Vari√°veis de ambiente
# Preencha com suas credenciais

# ===== Configura√ß√µes Supabase =====
SUPABASE_URL=sua_url_do_supabase
SUPABASE_KEY=sua_chave_do_supabase

# ===== Configura√ß√µes de Seguran√ßa =====
JWT_SECRET_KEY=chave_secreta_para_jwt
JWT_ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=60

# ===== Configura√ß√µes da API =====
PORT=8000
HOST=0.0.0.0
DEBUG=True
""")
            
            print("‚úÖ Arquivo .env b√°sico criado! Por favor, edite-o com suas credenciais.")
    else:
        print("‚úÖ Arquivo .env j√° existe!")

def setup_directories():
    """Cria estrutura de diret√≥rios se necess√°rio."""
    print("\nüîß Verificando estrutura de diret√≥rios...")
    
    # Lista de diret√≥rios para garantir que existem
    directories = [
        "src/api/routes",
        "src/core",
        "src/agents",
        "src/integrations",
        "src/utils",
        "scripts",
        "tests"
    ]
    
    for directory in directories:
        if not os.path.exists(directory):
            print(f"üìÅ Criando diret√≥rio: {directory}")
            os.makedirs(directory, exist_ok=True)
    
    print("‚úÖ Estrutura de diret√≥rios verificada!")

def show_next_steps():
    """Exibe pr√≥ximos passos para o usu√°rio."""
    print("\nüöÄ Configura√ß√£o inicial conclu√≠da!")
    print("\nüìù Pr√≥ximos passos:")
    print("  1. Edite o arquivo .env com suas credenciais do Supabase")
    print("  2. Configure o banco de dados no Supabase executando:")
    print("     python scripts/init_supabase.py --create-tables")
    print("  3. Inicie o servidor com:")
    print("     python start.py")
    print("  4. Acesse a documenta√ß√£o da API em:")
    print("     http://localhost:8000/docs")

if __name__ == "__main__":
    print("üöÄ Iniciando configura√ß√£o do DeFi Insight...")
    
    check_python_version()
    install_dependencies()
    setup_directories()
    setup_env_file()
    show_next_steps() 